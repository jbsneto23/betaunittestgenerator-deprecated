@(builder: builders.JUnitBuilder, testSuite: models.TestSuite)
import org.junit.Before;
import org.junit.After;
import org.junit.Test;
import static org.junit.Assert.*;
@defining(testSuite.getMachineName()){ className =>
/**
* Machine: @testSuite.getMachineName()
* Operation: @testSuite.getOperationUnderTest()
*
* Partition Strategy: @testSuite.getPartitionStrategy()
* Combination Strategy: @testSuite.getCombinatorialCriteria()
* Oracle Strategy: @testSuite.getOracleStrategy().getStrategy()
*/
public class @{builder.className(testSuite)} { 

	private @(className) @(className.toLowerCase());

	@@Before
	public void setUp() throws Exception {
		@(className.toLowerCase()) = new @(className)();
	} 
	@if(testSuite.getOracleStrategy() == models.OracleStrategy.STATE_INVARIANT || testSuite.getOracleStrategy() == models.OracleStrategy.STATE_INVARIANT_RETURN_VALUES || testSuite.getOracleStrategy() == models.OracleStrategy.STATE_INVARIANT_VARIABLES || testSuite.getOracleStrategy() == models.OracleStrategy.ALL){
	@@After
	public void checkInvariant() throws Exception {
		// implement something to check the state invariants
	}
	}
	@for(testCase <- testSuite.getTestCases()){
	/**
	* Test Case @testCase.getId()
	* Formula: @testCase.getFormula()
	*/
	@@Test
	public void testCase@(testCase.getId())() {
		@if(!testCase.getStateVariables().isEmpty()){// State } @* Beginning of for iteration *@ @for(variable <- testCase.getStateVariables()){
		@(builder.variableDeclaration(testCase.getFormula(), variable.getIdentifier()) + " = " + builder.variableAttribution(testCase.getFormula(), variable.getIdentifier(), variable.getValues()));
		@(builder.setCall(className.toLowerCase(), variable.getIdentifier()));
		} @* End of for iteration *@
		@if(!testCase.getOperationParameters().isEmpty()){// Input Values } @* Beginning of for iteration *@ @for(parameter <- testCase.getOperationParameters()){
		@(builder.variableDeclaration(testCase.getFormula(), parameter.getIdentifier()) + " = " + builder.variableAttribution(testCase.getFormula(), parameter.getIdentifier(), parameter.getValues()) + ";")
		} @* End of for iteration *@
		@if(testCase.hasReturn() && (testSuite.getOracleStrategy() == models.OracleStrategy.RETURN_VALUES || testSuite.getOracleStrategy() == models.OracleStrategy.STATE_INVARIANT_RETURN_VALUES || testSuite.getOracleStrategy() == models.OracleStrategy.STATE_VARIABLES_RETURN_VALUES || testSuite.getOracleStrategy() == models.OracleStrategy.ALL)){
		assertEquals(@(builder.operationCall(className.toLowerCase(), testSuite.getOperationUnderTest(), testCase.getOperationParameters())), /* Add expected value here */);
		} else {
		@(builder.operationCall(className.toLowerCase(), testSuite.getOperationUnderTest(), testCase.getOperationParameters()));
		}
		@if(testSuite.getOracleStrategy() == models.OracleStrategy.STATE_VARIABLES || testSuite.getOracleStrategy() == models.OracleStrategy.STATE_INVARIANT_VARIABLES || testSuite.getOracleStrategy() == models.OracleStrategy.STATE_VARIABLES_RETURN_VALUES || testSuite.getOracleStrategy() == models.OracleStrategy.ALL){
		@for(variable <- testCase.getStateVariables()){
		@(builder.variableDeclaration(testCase.getFormula(), variable.getIdentifier()) + "Expected");	// Add expected value here.
		assertEquals(@(builder.getCall(className.toLowerCase(), variable.getIdentifier()) + ", " + variable.getIdentifier() + "Expected"));
		} @* End of for iteration *@ } @* End if *@
	}
	}
}
}